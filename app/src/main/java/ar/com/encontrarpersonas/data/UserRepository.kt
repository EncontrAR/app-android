package ar.com.encontrarpersonas.data

import android.content.Context
import ar.com.encontrarpersonas.App
import ar.com.encontrarpersonas.api.EncontrarRestApi
import ar.com.encontrarpersonas.data.models.DeviceUser
import retrofit2.Callback

/**
 * MIT License
 *
 * Copyright (c) 2017 Proyecto Encontrar
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
object UserRepository {

    private val SHARED_PREFERENCES_USER = "UserPreferences"
    private val FIELD_API_AUTH_TOKEN = "apiAuthToken"
    private val FIELD_FIREBASE_NOTIFICATIONS_TOKEN = "firebaseNotificationsToken"
    private val FIELD_USER_FIRST_NAME = "userFirstName"
    private val FIELD_USER_LAST_NAME = "userLastName"
    private val FIELD_USER_NATIONAL_ID = "userNationalId"
    private val FIELD_SETTINGS_NOTIFICATIONS_TRAY = "settingsNotificationsTray"
    private val FIELD_SETTINGS_NOTIFICATIONS_WALLPAPER = "settingsNotificationsWallpaper"
    private val FIELD_USER_SAW_TOS = "userSawToS"

    // Since tokens are used frequently, store them in memory for faster access
    private var apiAuthToken: String? = null
    private var firebaseNotificationsToken: String? = null

    // Using lazy initialization to obtain shared preferences in case it is not necessary
    private val sharedPreferences by lazy {
        App.sInstance.getSharedPreferences(
                SHARED_PREFERENCES_USER,
                Context.MODE_PRIVATE)
    }

    /**
     * Returns the token required for the authenticated endpoints of Encontrar API.
     */
    fun getApiAuthToken(): String? {
        return if (apiAuthToken != null)
            apiAuthToken
        else
            sharedPreferences.getString(FIELD_API_AUTH_TOKEN, null)
    }

    /**
     * Sets asynchronously the token required for the authenticated endpoints of Encontrar API.
     */
    fun setApiAuthToken(token: String) {
        apiAuthToken = token
        sharedPreferences.edit().putString(FIELD_API_AUTH_TOKEN, token).apply()
    }

    /**
     * Returns Firebase's device token for sending push notifications to the running device.
     */
    fun getFirebaseNotificationsToken(): String? {
        return if (firebaseNotificationsToken != null)
            firebaseNotificationsToken
        else
            sharedPreferences.getString(FIELD_FIREBASE_NOTIFICATIONS_TOKEN, null)
    }

    /**
     *  Sets asynchronously Firebase's device token for sending push notifications
     *  to the running device.
     *
     *  Note that the token should be generated by Firebase. It doesn't make much sense to set
     *  any other custom token here.
     */
    fun setFirebaseNotificationsToken(token: String) {
        firebaseNotificationsToken = token
        sharedPreferences.edit().putString(FIELD_FIREBASE_NOTIFICATIONS_TOKEN, token).apply()
    }

    /**
     * Returns the user's first name
     */
    fun getUserFirstname(): String {
        return sharedPreferences.getString(FIELD_USER_FIRST_NAME, "")
    }

    /**
     * Sets asynchronously the user's first name
     */
    fun setUserFirstname(firstname: String) {
        sharedPreferences.edit().putString(FIELD_USER_FIRST_NAME, firstname.trim()).apply()
    }

    /**
     * Returns the user's first name
     */
    fun getUserLastName(): String {
        return sharedPreferences.getString(FIELD_USER_LAST_NAME, "")
    }

    /**
     * Sets asynchronously the user's last name
     */
    fun setUserLastName(lastName: String) {
        sharedPreferences.edit().putString(FIELD_USER_LAST_NAME, lastName.trim()).apply()
    }

    /**
     * Returns the user's national ID
     */
    fun getUserNationalId(): String {
        return sharedPreferences.getString(FIELD_USER_NATIONAL_ID, "")
    }

    /**
     * Sets asynchronously the user's national ID
     */
    fun setUserNationalId(nationalId: String) {
        sharedPreferences.edit().putString(FIELD_USER_NATIONAL_ID, nationalId.trim()).apply()
    }

    /**
     * Returns true if the user has tray notifications enabled
     */
    fun getSettingTrayNotifications(): Boolean {
        return sharedPreferences.getBoolean(FIELD_SETTINGS_NOTIFICATIONS_TRAY, true)
    }

    /**
     * Sets asynchronously the user's setting for tray notifications
     */
    fun setSettingTrayNotifications(enabled: Boolean) {
        sharedPreferences.edit().putBoolean(FIELD_SETTINGS_NOTIFICATIONS_TRAY, enabled).apply()
    }

    /**
     * Returns true if the user has wallpaper notifications enabled
     */
    fun getSettingWallpaperNotifications(): Boolean {
        return sharedPreferences.getBoolean(FIELD_SETTINGS_NOTIFICATIONS_WALLPAPER, true)
    }

    /**
     * Sets asynchronously the user's setting for wallpaper notifications
     */
    fun setSettingWallpaperNotifications(enabled: Boolean) {
        sharedPreferences.edit().putBoolean(FIELD_SETTINGS_NOTIFICATIONS_WALLPAPER, enabled).apply()
    }

    /**
     * Returns true if the user has already been advised about the existence of the
     * Terms of Service, returns false otherwise.
     */
    fun hasUserSeenToS(): Boolean {
        return sharedPreferences.getBoolean(FIELD_USER_SAW_TOS, false)
    }

    /**
     * Stores asynchronously a boolean that represents if the user has already been advised about
     * the existence of the Terms of Service, returns false otherwise.
     */
    fun setUserSawToS(seen: Boolean) {
        sharedPreferences.edit().putBoolean(FIELD_USER_SAW_TOS, seen).apply()
    }

    /**
     * Returns true if the user has complete personal details stored in the app.
     */
    fun userHasCompletePersonalDetails(): Boolean {
        return (getUserFirstname().isNotEmpty()
                && getUserLastName().isNotEmpty()
                && getUserNationalId().isNotEmpty())
    }

    /**
     * Forces an update of the user's data on the server
     */
    fun syncWithServer(callback: Callback<Void>) {
        EncontrarRestApi
                .deviceUser
                .editLoggedDevice(DeviceUser(
                        name = getUserFirstname(),
                        lastname = getUserLastName(),
                        nationalId = getUserNationalId()
                ))
                .enqueue(callback)
    }

}